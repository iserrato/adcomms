fs = 300e3; % this is the sample rate
fc = 90.8e6; % this is the center frequency

x = zeros(3e6,1); % empty vector to store data

% create object for RTL-SDR receiver
rx = comm.SDRRTLReceiver('CenterFrequency',fc, 'EnableTunerAGC', false, 'TunerGain', 35,  'SampleRate', fs);

counter = 1; % initialize a counter
while(counter < length(x)) % while the buffer for data is not full
    rxdata = rx();   % read from the RTL-SDR
    x(counter:counter + length(rxdata)-1) = rxdata; % save the samples returned
    counter = counter + length(rxdata); % increment counter
end
% the data are returned as complex numbers
% separate real and imaginary part, and remove any DC offset
y_I = real(x)-mean(real(x));
y_Q = imag(x)-mean(imag(x));
%%

%% Part c
figure(1)
plot_FT(y_I,fs);
title('Plot of Y_I(f)')

%% Part d
figure(2)
t = [1:length(y_I)]*(1/fs);
plot(t(122000:122300), y_I(122000:122300));
title('Time domain signal of y_I')
xlabel('Time (seconds)')
ylabel('Magnitude')

%% Part e
deriv = max(diff(y_I),0);
deriv_norm = deriv ./ max(abs(deriv));

t_short = t(:, 1:end-1);
figure(3)
plot(t_short(122000:122300), deriv_norm(122000:122300));
title('Derivative of normalized y_I in the time domain')
xlabel('Time (seconds)')
ylabel('Magnitude')

figure(4)
plot_FT(deriv_norm, fs);

%% Part f
fc = 2*pi*41000; %filtering at 41kHz
ti = [-50:1:49]*(1/fs);
h = fc/pi*sinc(fc/pi*ti);

t_sshort = t(:, 2:end-1);
d_n_lpf = conv(deriv_norm, h);
d_n_lpf = d_n_lpf ./ max(abs(d_n_lpf));
figure(5)
plot(t_short(122000:122300), deriv_norm(122000:122300)); hold on;
plot(t_sshort(122000:122300), d_n_lpf(122000:122300));
title('Derivative of normalized, LPFed y_I in the time domain')
xlabel('Time (seconds)')
ylabel('Magnitude')
hold off;
% 
% figure(6)
% plot_FT(d_n_lpf, fs);

%% part g

no_mean = d_n_lpf - mean(d_n_lpf);
norm_no_mean = no_mean * 0.1 / max(abs(no_mean));
dec_sig = decimate(norm_no_mean, 4);
sound(dec_sig, 300000/4)

%% Method 2
diff_yi = diff(y_I);
diff_yq = diff(y_Q);

diff1 = diff_yq .* y_I(1:end-1,:);
diff2 = diff_yi .* y_Q(1:end-1,:);
diffs = diff1 - diff2;

figure(7)
plot(t_short, diffs);

diffs_nm = diffs - mean(diffs);
diffs_norm = diffs * 0.1 / max(abs(diffs));
diffs_dec = decimate(diffs_norm, 4);

% figure(8)
% plot(t_short, diffs_norm);

sound(diffs_dec, 300000/4)